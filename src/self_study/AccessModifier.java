package self_study;

/*주제 : 접근제한자
*
* 접근제한자에 대한 이해와 숙련도가 부족한 것 같아서 보충 공부한다.
*
* 접근 제한자 : 접근 제한자는 말 그대로 접근을 제한하기 위해 사용된다. 여기서 접근이란 클래스 및 인터페이스 그리고 이들이 가지고 있는 멤버의 접근을 말한다.
* 어떤 경우에는 클래스와 인터페이스를 다른 패키지에서 사용하지 못하도록 막을 필요가 있다. 그리고 개체 생성을 막기 위해 생성자를 호출하지 못하게 하거나 필드나 메소드를 사용하지 못하도록 막아야하는 경우도 있따.
*
* public : 외부 클래스가 자유롭게 사용할 수 있도록 한다.
* protected : 같은 패키지 또는 자식 클래스에서 사용할 수 있도록 한다.
* private : 외부에서 사용할 수 없도록 한다.
* default : 같은 패키지에 소속된 클래스에서만 사용가능하게 한다.*/
public class AccessModifier {


    /*필드와 메소드의 접근 제한*/
    /*필드와 메소드를 선언할 때 해당 필드와 메소드를 클래스 내부에서만 사용할 것인지, 패키지 내에서만 사용할 것인지,
    * 아니면 다른 패키지에서도 사용할 수 있도록 할 것인지를 결정해야합니다.
    * 이것은 필드와 메소드가 어떤 접근 제한을 갖느냐에 따라 결정됩니다. 필드와 메소드는 다음과 같이 public, protected, default,private 접근 제한을 가질 수 있다.
    *
    * public : 모든 패키지에서 아무런 제한 없이 필드와 메소드를 사용할 수 있도록 한다.
    * protected : default 접근 제한과 마찬가지로 같은 패키지에 속하는 클래스에서 필드와 메소드를 사용할 수 있도록 한다.
    * 차이점으로 다른 패키지에 속한 클래스가 해당 클래스의 자식 클래스라면 필드와 메소드를 사용할 수 있다.
    *
    * default : 같은 패키지에서는 아무런 제한 없이 필드와 메소드를 사용할 수 있으나 다른 패키지에서는 필드와 메소드를 사용할 수 없다.
    * private : 동일한 패키지이건 다른 패키지이건 상관없이 필드와 메소드를 사용하지 못하도록 제한한다. 오직 클래스 내부에서만 사용할 수 있다.*/


    public static void main(String[] args) {
        MyClass myClass = new MyClass();
//        myClass.a="a";
        myClass.setA("a");

    }



}
